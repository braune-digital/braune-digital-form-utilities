{"version":3,"file":"form-error.interceptor.js","sourceRoot":"","sources":["form-error.interceptor.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,iBAAiB,EAAwD,MAAM,sBAAsB,CAAC;AAC/G,OAAO,sBAAsB,CAAC;AAE9B,OAAO,EAAE,gBAAgB,EAAE,MAAM,gCAAgC,CAAC;AAGlE,MAAM;;;;IAEJ,YAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;KACrD;;;;;;IAED,SAAS,CAAC,GAAqB,EAAE,IAAiB;QAChD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE;SAC/B,EAAE,CAAC,GAAQ,EAAE,EAAE;YACd,EAAE,CAAC,CAAC,GAAG,YAAY,iBAAiB,CAAC,CAAC,CAAC;gBACrC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;oBACvB,uBAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC;oBAC9B,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACtD,uBAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBAC5D,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;4BACzB,uBAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;4BAClD,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gCAClD,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAY,EAAE,EAAE;oCACvC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,EAAC,aAAa,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;iCAClF,CAAC,CAAC;6BACJ;yBACF,CAAC,CAAC;qBACJ;iBACF;aACF;SACF,CAAC,CAAC;KACJ;;;YA1BF,UAAU;;;;YAFF,gBAAgB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport 'rxjs/add/operator/do';\nimport { Observable } from 'rxjs/Observable';\nimport { FormErrorService } from '../services/form-error.service';\n\n@Injectable()\nexport class FormErrorInterceptor implements HttpInterceptor {\n\n  constructor(private formErrorService: FormErrorService) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).do(() => {\n    }, (err: any) => {\n      if (err instanceof HttpErrorResponse) {\n        if (err.status === 400) {\n          const errorObject = err.error;\n          if (errorObject.errors && errorObject.errors.children) {\n            const objectKeys = Object.keys(errorObject.errors.children);\n            objectKeys.forEach((key) => {\n              const property = errorObject.errors.children[key];\n              if (property.errors && property.errors.length > 0) {\n                property.errors.forEach((message: any) => {\n                  this.formErrorService.propertyError.next({property_path: key, message: message});\n                });\n              }\n            });\n          }\n        }\n      }\n    });\n  }\n}\n"]}