{"version":3,"file":"autosize.directive.js","sourceRoot":"","sources":["autosize.directive.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAEL,SAAS,EACT,UAAU,EACV,YAAY,EACb,MAAM,eAAe,CAAC;AASvB,MAAM;;;;IAEJ,YACU;QAAA,SAAI,GAAJ,IAAI;KACT;;;;IAEE,eAAe;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;;;;;IAKR,MAAM;QACZ,uBAAM,QAAQ,qBAAG,IAAI,CAAC,IAAI,CAAC,aAAoC,CAAA,CAAC;;QAEhE,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;;QAE/B,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,QAAQ,CAAC,YAAY,IAAI,CAAC;;;;YAxBxD,SAAS,SAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,IAAI,EAAE;oBACJ,MAAM,EAAE,GAAG;oBACX,OAAO,EAAE,kBAAkB;iBAC5B;aACF;;;;YAVC,UAAU;;;uBAqBT,YAAY,SAAC,OAAO,cACpB,YAAY,SAAC,MAAM","sourcesContent":["import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener\n} from '@angular/core';\n\n@Directive({\n  selector: 'textarea[autosize]',\n  host: {\n    'rows': '1',\n    'style': 'overflow: hidden'\n  }\n})\nexport class AutosizeDirective implements AfterViewInit {\n\n  constructor(\n    private elem: ElementRef\n  ) { }\n\n  public ngAfterViewInit() {\n    this.resize();\n  }\n\n  @HostListener('input')\n  @HostListener('load')\n  private resize() {\n    const textarea = this.elem.nativeElement as HTMLTextAreaElement;\n    // Reset textarea height to auto that correctly calculate the new height\n    textarea.style.height = 'auto';\n    // Set new height\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\n}\n"]}