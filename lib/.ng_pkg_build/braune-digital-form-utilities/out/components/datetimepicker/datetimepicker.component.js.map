{"version":3,"file":"datetimepicker.component.js","sourceRoot":"","sources":["datetimepicker.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { FormInputComponent } from '../form-input.component';\nimport { ControlValueAccessor, DefaultValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Component, forwardRef, Inject, Input, OnInit, ViewChild } from '@angular/core';\nimport { FormErrorService } from '../../services/form-error.service';\nimport { FormUtilitiesOptions } from '../../form-utilities.module';\nimport {BsDatepickerConfig, BsDaterangepickerDirective, BsLocaleService, DatePickerComponent} from 'ngx-bootstrap';\nimport {Time} from 'ngx-bootstrap/timepicker/timepicker.models';\n\n@Component({\n  moduleId: module.id,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DatetimepickerComponent),\n    multi: true\n  }],\n  selector: 'bd-datetimepicker',\n  template: `<div class=\"{{ options.classFormGroup }}\" [ngClass]=\"{'has-errors': errors.length}\">\n  <bd-form-label [label]=\"label\"></bd-form-label>\n\n  <div class=\"row\">\n    <div class=\"col-md-6 col-sm-12\">\n      <input #dp\n             type=\"text\"\n             class=\"{{ options.classFormControl }} {{ inputClass }}\"\n             bsDatepicker\n             [bsConfig]=\"bsConfig\"\n             [placeholder]=\"placeholder\"\n             [disabled]=\"disabled\"\n             [minDate]=\"bsMinDate\"\n             [maxDate]=\"bsMaxDate\"\n             [bsValue]=\"dateTime.date\"\n             [(ngModel)]=\"dateTime.date\"\n             [disabled]=\"isDisabled\"\n             (ngModelChange)=\"onDateChange($event)\"\n      />\n    </div>\n    <div class=\"col-md-6 col-sm-12\">\n      <timepicker\n              [(ngModel)]=\"dateTime.time\"\n              (ngModelChange)=\"onTimeChange($event)\"\n              [showMeridian]=\"isMeridian\"\n              [disabled]=\"disabled\"\n              [readonlyInput]=\"isDisabled\"\n      ></timepicker>\n    </div>\n  </div>\n\n  <bd-form-errors [errors]=\"errors\"></bd-form-errors>\n  <bd-form-help [label]=\"help\"></bd-form-help>\n\n</div>\n`,\n  styles: [`:host timepicker{margin-top:-18px;display:block}:host ::ng-deep timepicker .btn{min-width:0;padding:0}`]\n})\nexport class DatetimepickerComponent extends FormInputComponent implements ControlValueAccessor, OnInit {\n\n  input;\n\n  dateTime: {date: Date, time: Date};\n  isDisabled: boolean;\n\n  @ViewChild(DatePickerComponent)\n  dp: DatePickerComponent;\n\n  @Input()\n  label: string;\n\n  @Input()\n  help: string;\n\n  @Input()\n  inputClass: string;\n\n  @Input()\n  placeholder = '';\n\n  @Input()\n  disableErrors = false;\n\n  @Input()\n  formControl: FormControl;\n\n  @Input()\n  bsConfig: BsDatepickerConfig = new BsDatepickerConfig();\n\n  @Input()\n  bsLang: string = 'en';\n\n  @Input()\n  bsMaxDate: Date = null;\n\n  @Input()\n  bsMinDate: Date = null;\n\n  @Input()\n  isMeridian = false;\n\n  onChange: (_: any) => void;\n  onTouched: () => void;\n\n  constructor(@Inject('options') protected _options: FormUtilitiesOptions, public formErrorService: FormErrorService, public langService: BsLocaleService) {\n    super(_options);\n  }\n\n  writeValue(value: string): void {\n    if (!value) {\n      this.dateTime = {date: null, time: new Date()};\n    } else {\n      this.dateTime = {date: new Date(value), time: new Date(value)};\n    }\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n  onDateChange(date: any) {\n    this.onChange(this.dateTime.date.toISOString());\n  }\n\n  onTimeChange(date: any) {\n    if (this.dateTime.date) {\n      this.dateTime.date.setHours(this.dateTime.time.getHours());\n      this.dateTime.date.setMinutes(this.dateTime.time.getMinutes());\n      this.dateTime.date.setSeconds(this.dateTime.time.getSeconds());\n      this.onChange(this.dateTime.date.toISOString());\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.langService.use(this.bsLang);\n    if (this.disabled) {\n      this.formControl.disable();\n    }\n  }\n}\n"]}