{"version":3,"file":"rte.component.js","sourceRoot":"","sources":["rte.component.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EAAwB,oBAAoB,EAAE,WAAW,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAC5G,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAChF,OAAO,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAC;AACrE,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAsCjD,MAAM,mBAAoB,SAAQ,kBAAkB;;;;;IA0ClD,YAAyC,UAAsC,gBAAkC;QAC/G,KAAK,CAAC,QAAQ,CAAC,CAAC;QADuB,aAAQ,GAAR,QAAQ;QAA8B,qBAAgB,GAAhB,gBAAgB,CAAkB;yBAjCjG;YACd,OAAO,EAAE;gBACP,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC;gBACzC,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC;;gBACzC,CAAC,YAAY,EAAE,YAAY,CAAC;gBAC5B,CAAC,EAAE,MAAM,EAAE,SAAS,EAAC,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;gBAC5C,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;gBACjB,CAAC,OAAO,CAAC;gBACT,CAAC,MAAM,CAAC;aACT;SACF;2BAYa,EAAE;6BAGA,KAAK;KAUpB;;;;;IAED,UAAU,CAAC,UAAU;KAEpB;;;;;IAED,gBAAgB,CAAC,EAAoB;KACpC;;;;;IAED,iBAAiB,CAAC,EAAc;KAC/B;;;;;IAED,gBAAgB,CAAC,UAAmB;KACnC;;;YA3FF,SAAS,SAAC;gBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;gBACnB,SAAS,EAAE,CAAC;wBACV,OAAO,EAAE,iBAAiB;wBAC1B,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC;wBAC3C,KAAK,EAAE,IAAI;qBACZ,CAAC;gBACF,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;CAwBX;aACA;;;;4CA2Cc,MAAM,SAAC,SAAS;YAjFtB,gBAAgB;;;sBAyCtB,SAAS,SAAC,oBAAoB;uBAG9B,SAAS,SAAC,iBAAiB;0BAG3B,KAAK;sBAaL,KAAK;qBAGL,KAAK;2BAGL,KAAK;4BAGL,KAAK;8BAGL,KAAK;4BAGL,KAAK","sourcesContent":["import { FormInputComponent } from '../form-input.component';\nimport { ControlValueAccessor, DefaultValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Component, forwardRef, Inject, Input, ViewChild } from '@angular/core';\nimport { FormErrorService } from '../../services/form-error.service';\nimport { CKEditorComponent } from 'ng2-ckeditor';\nimport { FormUtilitiesOptions } from '../../form-utilities.module';\n\n\n@Component({\n  moduleId: module.id,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RteComponent),\n    multi: true\n  }],\n  selector: 'bd-rte',\n  template: `<div class=\"{{ options.classFormGroup }}\" [ngClass]=\"{'has-errors': errors.length}\">\n\n  <div class=\"{{ options.classFromInput }}\">\n\n    <div class=\"{{ options.classFromLegend }}\">\n\n      <bd-form-label [label]=\"label\" [inputId]=\"uniqueId\"></bd-form-label>\n      <bd-form-required [required]=\"requiredMarker\" *ngIf=\"requiredMarker\"></bd-form-required>\n      <bd-form-tips [tips]=\"tips\" *ngIf=\"tips\"></bd-form-tips>\n      <bd-form-counter [maxLength]=\"maxLength\" [form]=\"formControl\" *ngIf=\"maxLength && options.counterBefore\"></bd-form-counter>\n\n    </div>\n\n    <div class=\"{{ inputGroupClass }}\">\n\n      <quill-editor #editor [formControl]=\"formControl\" [modules]=\"rteConfig\"></quill-editor>\n\n    </div>\n  </div>\n\n  <bd-form-errors [errors]=\"errors\" *ngIf=\"errors\"></bd-form-errors>\n  <bd-form-counter [maxLength]=\"maxLength\" [form]=\"formControl\" *ngIf=\"maxLength && !options.counterBefore\"></bd-form-counter>\n  <bd-form-help [label]=\"help\" *ngIf=\"help\"></bd-form-help>\n</div>\n`\n})\nexport class RteComponent extends FormInputComponent{\n\n  @ViewChild(DefaultValueAccessor)\n  input: DefaultValueAccessor;\n\n  @ViewChild(CKEditorComponent)\n  editor: CKEditorComponent;\n\n  @Input()\n  rteConfig: {} = {\n    toolbar: [\n      [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\n      ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n      ['blockquote', 'code-block'],\n      [{ 'list': 'ordered'}, { 'list': 'bullet' }],\n      [{ 'align': [] }],\n      ['clean'],\n      ['link']\n    ]\n  };\n\n  @Input()\n  label: string;\n\n  @Input()\n  help: string;\n\n  @Input()\n  inputClass: string;\n\n  @Input()\n  placeholder = '';\n\n  @Input()\n  disableErrors = false;\n\n  @Input()\n  formControl: FormControl;\n\n  onChange: (_: any) => void;\n  onTouched: () => void;\n\n  constructor(@Inject('options') protected _options:FormUtilitiesOptions, public formErrorService: FormErrorService) {\n    super(_options);\n  }\n\n  writeValue(writeValue){\n\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n  }\n\n  registerOnTouched(fn: () => void): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n\n}\n"]}