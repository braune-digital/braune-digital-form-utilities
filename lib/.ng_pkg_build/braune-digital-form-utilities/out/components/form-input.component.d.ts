import { OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, FormControl } from '@angular/forms';
import { Subscription } from 'rxjs/Subscription';
import { FormErrorService } from '../services/form-error.service';
import { FormUtilitiesOptions } from '../form-utilities.module';
import { TipsOptions } from './utilities/models';
export declare abstract class FormInputComponent implements OnInit, OnDestroy, ControlValueAccessor {
    protected _options: FormUtilitiesOptions;
    static readonly REMOTE_ERROR_PREFIX: string;
    static readonly ERROR_PREFIX: string;
    abstract input: ControlValueAccessor;
    abstract formErrorService: FormErrorService;
    abstract label: string;
    abstract placeholder: string;
    abstract formControl: FormControl;
    formErrorServiceSubscription: Subscription;
    displayErrors: boolean;
    requiredMarker: boolean;
    tips: Array<TipsOptions>;
    help: string;
    maxLength: number;
    append: string;
    prepend: string;
    disabled: boolean;
    uniqueId: string;
    private _focus;
    readonly errors: Array<string>;
    protected constructor(_options: FormUtilitiesOptions);
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    readonly inputGroupClass: string;
    private getErrorKey(propertyPath);
    readonly options: FormUtilitiesOptions;
    focus: boolean;
}
