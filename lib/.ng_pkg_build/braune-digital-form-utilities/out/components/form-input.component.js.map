{"version":3,"file":"form-input.component.js","sourceRoot":"","sources":["form-input.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Input, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor, FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FormErrorService } from '../services/form-error.service';\nimport { FormUtilitiesOptions } from '../form-utilities.module';\nimport {TipsOptions} from './utilities/models';\n\nexport abstract class FormInputComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n  static readonly REMOTE_ERROR_PREFIX = 'remote_';\n  static readonly ERROR_PREFIX = 'form.errors';\n\n  abstract input: ControlValueAccessor;\n  abstract formErrorService: FormErrorService;\n\n  abstract label: string;\n  abstract placeholder: string;\n  abstract formControl: FormControl;\n\n  formErrorServiceSubscription: Subscription;\n\n  @Input()\n  public displayErrors = false;\n\n  @Input()\n  public requiredMarker = false;\n\n  @Input()\n  tips: Array<TipsOptions>;\n\n  @Input()\n  help: string;\n\n  @Input()\n  maxLength: number;\n\n  @Input()\n  append: string;\n\n  @Input()\n  prepend: string;\n\n  @Input()\n  disabled = false;\n\n  uniqueId =  '_' + Math.random().toString(36).substr(2, 9);\n\n  private _focus: boolean;\n\n  get errors(): Array<string> {\n    let errors = [];\n    if (\n      (this.options.displayErrors || this.displayErrors)\n      && this.formControl\n      && this.formControl.touched\n      && this.formControl.errors\n    ) {\n      return Object.keys(this.formControl.errors).map(key => {\n        // If error is a remote error take the message directly\n        if (key.substr(0, FormInputComponent.REMOTE_ERROR_PREFIX.length) == FormInputComponent.REMOTE_ERROR_PREFIX) {\n          return this.formControl.errors[key];\n        }\n        return FormInputComponent.ERROR_PREFIX + '.' + key;\n      });\n    }\n    return [];\n  }\n\n\n  protected constructor(@Inject('options') protected _options: FormUtilitiesOptions) {}\n\n  ngOnInit(): void {\n\n    // Tell the\n    this.formErrorServiceSubscription = this.formErrorService.propertyError.subscribe(error => {\n      // todo - @Jannik - do not set this on every control\n      // todo - Maybe use a custom formBuilder and register the parent form on the formErrorService\n      // todo - For performance use onPush-strategy if above solution is not yet implemented\n      if (this.formControl && this.formControl.root) {\n        const control = this.formControl.root.get(error.property_path);\n        const errorKey = this.getErrorKey(error.property_path);\n        if (control && !control.hasError(errorKey)) {\n          control.setErrors({...control.errors, [errorKey]: error.message});\n        }\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.formErrorServiceSubscription.unsubscribe();\n  }\n\n  writeValue(value: any): void {\n    this.input.writeValue(value);\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.input.registerOnChange(fn);\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.input.registerOnTouched(fn);\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.input.setDisabledState(isDisabled);\n  }\n\n  get inputGroupClass(): string {\n    if (this.prepend) {\n      return this._options.classFormInputGroup + ' ' + this._options.classFormInputGroup + '--prepend';\n    }\n    if (this.append) {\n      return this._options.classFormInputGroup + ' ' + this._options.classFormInputGroup + '--append';\n    }\n    return '';\n  }\n\n  private getErrorKey(propertyPath: string): string {\n    return FormInputComponent.REMOTE_ERROR_PREFIX + propertyPath.split('.').pop();\n  }\n\n  get options(): FormUtilitiesOptions {\n    return this._options;\n  }\n\n\n  get focus(): boolean {\n    return this._focus;\n  }\n\n  set focus(value: boolean) {\n    this._focus = value;\n  }\n}\n"]}