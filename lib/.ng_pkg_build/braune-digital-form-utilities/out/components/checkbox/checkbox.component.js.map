{"version":3,"file":"checkbox.component.js","sourceRoot":"","sources":["checkbox.component.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EACL,4BAA4B,EAE5B,WAAW,EACX,iBAAiB,EAClB,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAAC,SAAS,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAC,MAAM,eAAe,CAAC;AACpG,OAAO,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAC;AAErE,OAAO,EAAC,IAAI,EAAC,MAAM,gBAAgB,CAAC;AA+CpC,MAAM,wBAAyB,SAAQ,kBAAkB;;;;;IAyBvD,YAAyC,UAAsC,gBAAkC;QAC/G,KAAK,CAAC,QAAQ,CAAC,CAAC;QADuB,aAAQ,GAAR,QAAQ;QAA8B,qBAAgB,GAAhB,gBAAgB,CAAkB;2BAnBnG,EAAE;6BAKA,KAAK;wBAGV,KAAK;wBAMkB,IAAI,YAAY,EAAE;yBAGxC,KAAK;iCAeuB,IAAI;gCACC,IAAI;KAZhD;;;;IAED,IAAI,KAAK;QACP,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;KACvB;;;;;IAGD,IAAI,KAAK,CAAC,KAAU;QAClB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KACxB;;;;;IAMD,UAAU,CAAC,KAAU;QACnB,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SACxB;KACF;;;;;IAED,aAAa,CAAC,SAAS;QACrB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACnC;;;;;IAGD,gBAAgB,CAAC,EAAO;QACtB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;KAC5B;;;;;IAGD,iBAAiB,CAAC,EAAO;QACvB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;KAC7B;;;;;IAED,gBAAgB,CAAC,UAAmB;QAClC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;KAC5B;;;YA/GF,SAAS,SAAC;gBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;gBACnB,SAAS,EAAE,CAAC;wBACV,OAAO,EAAE,iBAAiB;wBAC1B,WAAW,EAAE,UAAU,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC;wBAChD,KAAK,EAAE,IAAI;qBACZ,CAAC;gBACF,QAAQ,EAAE,aAAa;gBACvB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCX;aACA;;;;4CA0Bc,MAAM,SAAC,SAAS;YA1EtB,gBAAgB;;;sBAkDtB,SAAS,SAAC,4BAA4B;sBAEtC,KAAK;4BAEL,KAAK;2BAEL,KAAK;8BAGL,KAAK;yBAGL,KAAK;4BAGL,KAAK;yBAGL,MAAM;0BAGN,KAAK","sourcesContent":["import { FormInputComponent } from '../form-input.component';\nimport {\n  CheckboxControlValueAccessor,\n  ControlValueAccessor, DefaultValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR\n} from '@angular/forms';\nimport {Component, EventEmitter, forwardRef, Inject, Input, Output, ViewChild} from '@angular/core';\nimport { FormErrorService } from '../../services/form-error.service';\nimport { FormUtilitiesOptions } from '../../form-utilities.module';\nimport {noop} from 'rxjs/util/noop';\n\n@Component({\n  moduleId: module.id,\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n  }],\n  selector: 'bd-checkbox',\n  template: `<div class=\"{{ options.classFormGroup }}\" [ngClass]=\"{'has-errors': errors.length}\">\n\n\n\n</div>\n\n<div class=\"{{ options.classFormGroup }}\">\n\n  <div class=\"{{ options.classFromInput }}\">\n\n    <div class=\"{{ options.classFromLegend }}\">\n\n      <bd-form-label [label]=\"label\" [inputId]=\"uniqueId\"></bd-form-label>\n      <bd-form-required [required]=\"requiredMarker\" *ngIf=\"requiredMarker\"></bd-form-required>\n      <bd-form-tips [tips]=\"tips\" *ngIf=\"tips\"></bd-form-tips>\n\n    </div>\n\n    <div class=\"{{ inputGroupClass }}\">\n\n      <div class=\"checkbox\">\n        <label>\n          <input [disabled]=\"disabled\" type=\"checkbox\"  [(ngModel)]=\"isChecked\" #inputEl\n                 (change)=\"onInputChange(inputEl.checked)\"\n                 ngDefaultControl /> <span *ngIf=\"label\">{{ label }}</span>\n        </label>\n      </div>\n\n    </div>\n  </div>\n\n  <bd-form-errors [errors]=\"errors\" *ngIf=\"errors\"></bd-form-errors>\n  <bd-form-help [label]=\"help\" *ngIf=\"help\"></bd-form-help>\n</div>\n\n`\n})\nexport class CheckboxComponent extends FormInputComponent implements ControlValueAccessor {\n  @ViewChild(CheckboxControlValueAccessor)\n  input: CheckboxControlValueAccessor;\n  @Input()\n  label: string;\n  @Input()\n  placeholder = '';\n  @Input()\n  inputClass: string;\n\n  @Input()\n  disableErrors = false;\n\n  @Input()\n  disabled = false;\n\n  @Input()\n  formControl: FormControl;\n\n  @Output()\n  onChange: EventEmitter<boolean> = new EventEmitter();\n\n  @Input()\n  isChecked = false;\n\n  constructor(@Inject('options') protected _options:FormUtilitiesOptions, public formErrorService: FormErrorService) {\n    super(_options);\n  }\n\n  get value(): any {\n    return this.isChecked;\n  }\n\n  // set accessor including call the onchange callback\n  set value(value: any) {\n    this.isChecked = value;\n  }\n\n  private onTouchedCallback: () => void = noop;\n  private onChangeCallback: (_: any) => void = noop;\n\n\n  writeValue(value: any): void {\n    if (value !== this.isChecked) {\n      this.isChecked = value;\n    }\n  }\n\n  onInputChange(isChecked) {\n    this.value = isChecked;\n    this.onChange.emit(this.isChecked);\n    this.onChangeCallback(this.value);\n  }\n\n  // From ControlValueAccessor interface\n  registerOnChange(fn: any) {\n    this.onChangeCallback = fn;\n  }\n\n  // From ControlValueAccessor interface\n  registerOnTouched(fn: any) {\n    this.onTouchedCallback = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n"]}